// THIS IS AN AUTO-GENERATED FILE, DONT MODIFY IT!
// Author: bbbirder
// Defined Assembly: {{modulename}}
using System;
using System.Collections.Generic;
using System.Reflection;
using com.bbbirder;
{{ (target_namespace | string.empty) ? "" : "namespace "+target_namespace+"{" }}
	{{accessibility}} partial class {{target_name}}:IWatched{
        public Action<object, string> onSetProperty { get; set; }
        public Action<object, string> onGetProperty { get; set; }

		public {{src_name}} __rawObject { get; private set; }


		{{~ for m in members ~}}
		
		{{~ if m.is_list ~}}
		{{m.type = "ReactiveList<"+m.element_type+">"}}
		{{m.type}} __inner_{{m.name}};
		{{~ else if m.is_watched ~}}
		{{m.type}} __inner_{{m.name}};
		{{~ end ~}}

		{{m.comment}}
		#if ODIN_INSPECTOR
		[Sirenix.OdinInspector.ShowInInspector]
		#endif
		{{m.accessibility}} {{m.type}} @{{m.name}}{
			get {
				{{~ if m.is_list ~}}
					__inner_{{m.name}}??=new(__rawObject?.{{m.name}});
					onGetProperty?.Invoke(__rawObject,"{{m.name}}");
					return __inner_{{m.name}};
				{{~ else ~}}
					{{~ if m.is_watched ~}}
					__inner_{{m.name}} ??= __rawObject.{{m.name}};
					onGetProperty?.Invoke(__rawObject,"{{m.name}}");
					return __inner_{{m.name}};
					{{~ else ~}}
					onGetProperty?.Invoke(__rawObject,"{{m.name}}");
					return __rawObject.{{m.name}};
					{{~ end ~}}
				{{~ end ~}}
			}
			{{~ if m.can_write ~}}
			set {
				{{~ if m.is_list ~}}
					if(__rawObject !=null && __rawObject.{{m.name}}.Equals(value)) return;
					var prev = __inner_{{m.name}};
					__inner_{{m.name}}=new(value);
					onSetProperty?.Invoke(__rawObject,"{{m.name}}");
				{{~ else ~}}
					{{~ if m.is_watched ~}}
					__inner_{{m.name}} = value;
					__rawObject.{{m.name}} = value.__rawObject;
					onSetProperty?.Invoke(__rawObject,"{{m.name}}");
					{{~ else ~}}
					if(__rawObject.{{m.name}}==value) return;
					__rawObject.{{m.name}} = value;
					onSetProperty?.Invoke(__rawObject,"{{m.name}}");
					{{~ end ~}}
				{{~ end ~}}
			}
			{{~ end ~}}
		}


		{{~ end ~}}

		public void __InitWithRawData(object raw){
			__rawObject = ({{src_name}})raw;
		}

		// Implicit Type Cast
		public static implicit operator {{target_name}}({{src_name}} raw){
			var ret = new {{target_name}}();//(raw);
			ret.__InitWithRawData(raw);
			//CSReactive.DataMaker.OnMakeData(ret);
			return ret;
		}
		
		// Default Constructor
		public {{target_name}}(){
			{{~ if write_back ~}}
			var raw = System.Activator.CreateInstance(typeof({{src_name}}));
			this.__InitWithRawData(raw);
			{{~ end ~}}
			CSReactive.DataMaker.OnMakeData(this);
		}

		public object this[string key]{
			get {
				{{~ for m in members ~}}
				if(key.Equals("{{m.name}}")){
					{{~ if m.can_write ~}}
					onGetProperty?.Invoke(__rawObject,"{{m.name}}");
					{{~ end ~}}
					return (object)__rawObject.{{m.name}};
				}
				{{~ end ~}}
				return null;
			}
			set {
				{{~ for m in members ~}}
				if(key.Equals("{{m.name}}")){
					{{~ if !m.can_write ~}}
					throw new Exception($"cannot set member {key}, it is readonly");
					{{~else~}}
					if(!(value is {{m.raw_type}} __v) || __rawObject.{{m.name}}==__v) return;
					__rawObject.{{m.name}} = __v;
					onSetProperty?.Invoke(__rawObject,"{{m.name}}");
					return;
					{{~ end ~}}
				}
				{{~ end ~}}
				throw new Exception($"cannot set member {key}, no such member in type {{src_name}}");
			}
		}
		
	}

{{ (target_namespace | string.empty) ? "" : "}" }}


namespace com.bbbirder{
	public static partial class DataExtension{
		{{accessibility}} static {{target_ns_part+target_name}} Reactive(this CSReactive.__Internal_Maker __maker,{{src_name}} __data){
			var __watched_obj = new {{target_ns_part+target_name}}();
			__watched_obj.__InitWithRawData(__data);
			__maker.OnMakeData(__watched_obj);
			return __watched_obj;
		}
	}

}
